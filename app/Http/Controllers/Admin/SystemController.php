<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Services\SystemHealthService;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;

/**
 * XIV AI - System Management Controller
 * 
 * Admin paneli √º√ß√ºn sistem idar…ôetm…ô …ôm…ôliyyatlarƒ±
 * 
 * Version: v1.0.0
 * Release Date: 28.09.2025
 * Author: DeXIV
 */
class SystemController extends Controller
{
    private SystemHealthService $systemHealthService;
    
    public function __construct(SystemHealthService $systemHealthService)
    {
        $this->systemHealthService = $systemHealthService;
    }
    
    /**
     * Cache t…ômizl…ôm…ô
     */
    public function clearCache(Request $request): JsonResponse
    {
        try {
            $result = $this->systemHealthService->clearCache();
            
            return response()->json([
                'success' => $result['success'],
                'message' => $result['message'],
                'details' => $result['details'] ?? null
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Cache t…ômizl…ôm…ô x…ôtasƒ±: ' . $e->getMessage()
            ], 500);
        }
    }
    
    /**
     * Sistem saƒülamlƒ±ƒüƒ±nƒ± yoxla
     */
    public function getSystemHealth(Request $request): JsonResponse
    {
        try {
            $systemHealth = $this->systemHealthService->getSystemHealth();
            
            return response()->json([
                'success' => true,
                'data' => $systemHealth
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Sistem saƒülamlƒ±ƒüƒ± yoxlanƒ±la bilm…ôdi: ' . $e->getMessage()
            ], 500);
        }
    }
    
    /**
     * Sistem m…ôlumatlarƒ±
     */
    public function getSystemInfo(Request $request): JsonResponse
    {
        try {
            $systemInfo = [
                'server_info' => [
                    'php_version' => PHP_VERSION,
                    'laravel_version' => app()->version(),
                    'server_software' => $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown',
                    'memory_limit' => ini_get('memory_limit'),
                    'max_execution_time' => ini_get('max_execution_time'),
                    'upload_max_filesize' => ini_get('upload_max_filesize'),
                ],
                'environment' => [
                    'app_env' => config('app.env'),
                    'app_debug' => config('app.debug'),
                    'app_timezone' => config('app.timezone'),
                    'database_connection' => config('database.default'),
                    'cache_driver' => config('cache.default'),
                    'session_driver' => config('session.driver'),
                ]
            ];
            
            return response()->json([
                'success' => true,
                'data' => $systemInfo
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Sistem m…ôlumatlarƒ± alƒ±na bilm…ôdi: ' . $e->getMessage()
            ], 500);
        }
    }
    
    /**
     * Artisan komandalarƒ±nƒ± icra et
     */
    public function runArtisanCommand(Request $request): JsonResponse
    {
        $request->validate([
            'command' => 'required|string|in:cache:clear,config:clear,route:clear,view:clear,config:cache,route:cache,view:cache,migrate,migrate:status'
        ]);
        
        try {
            $command = $request->input('command');
            
            // T…ôhl√ºk…ôsizlik √º√ß√ºn yalnƒ±z icaz…ô veril…ôn komandalar
            $allowedCommands = [
                'cache:clear' => 'Application cache t…ômizl…ôndi',
                'config:clear' => 'Configuration cache t…ômizl…ôndi', 
                'route:clear' => 'Route cache t…ômizl…ôndi',
                'view:clear' => 'View cache t…ômizl…ôndi',
                'config:cache' => 'Configuration cache yaradƒ±ldƒ±',
                'route:cache' => 'Route cache yaradƒ±ldƒ±',
                'view:cache' => 'View cache yaradƒ±ldƒ±',
                'migrate' => 'Database migration-larƒ± i≈ül…ôdildi',
                'migrate:status' => 'Migration statusu yoxlandƒ±',
            ];
            
            if (!array_key_exists($command, $allowedCommands)) {
                return response()->json([
                    'success' => false,
                    'message' => 'ƒ∞caz…ô verilm…ôy…ôn komanda'
                ], 403);
            }
            
            // Migration √º√ß√ºn x√ºsusi i≈ül…ôm
            if ($command === 'migrate') {
                // Production-da --force bayraƒüƒ± il…ô migration-larƒ± i≈ül…ôt
                \Artisan::call('migrate', ['--force' => true]);
            } else {
                \Artisan::call($command);
            }
            
            $output = \Artisan::output();
            
            return response()->json([
                'success' => true,
                'message' => $allowedCommands[$command],
                'output' => trim($output)
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Komanda icra edil…ô bilm…ôdi: ' . $e->getMessage()
            ], 500);
        }
    }
    
    /**
     * Database t…ômir v…ô migration-larƒ± avtomatik i≈ül…ôt
     */
    public function repairDatabase(Request $request): JsonResponse
    {
        try {
            $results = [];
            $errors = [];
            
            // 1. Cache t…ômizl…ôm…ô
            try {
                \Artisan::call('cache:clear');
                \Artisan::call('config:clear');
                \Artisan::call('route:clear');
                $results[] = '‚úÖ Cache-l…ôr t…ômizl…ôndi';
            } catch (\Exception $e) {
                $errors[] = '‚ùå Cache t…ômizl…ôm…ô x…ôtasƒ±: ' . $e->getMessage();
            }
            
            // 2. Migration statusunu yoxla
            try {
                \Artisan::call('migrate:status');
                $migrationStatus = \Artisan::output();
                $results[] = '‚úÖ Migration statusu yoxlanƒ±ldƒ±';
            } catch (\Exception $e) {
                $errors[] = '‚ùå Migration status x…ôtasƒ±: ' . $e->getMessage();
            }
            
            // 3. Migration-larƒ± i≈ül…ôt (--force il…ô) - ∆èVV∆èL STATUSU YOXLA
            try {
                // ∆èv…ôl migration statusunu yoxlayƒ±rq
                \Artisan::call('migrate:status');
                $statusBefore = \Artisan::output();
                $results[] = 'üîç Migration status (qabaq): ' . substr(trim($statusBefore), -200);
                
                // Migration-larƒ± i≈ül…ôd
                \Artisan::call('migrate', ['--force' => true]);
                $migrateOutput = \Artisan::output();
                $results[] = '‚úÖ Migration-lar avtomatik i≈ül…ôdildi';
                $results[] = 'Migration √ßƒ±xƒ±≈üƒ±: ' . trim($migrateOutput);
                
                // Sonra statusu yoxlayƒ±rq
                \Artisan::call('migrate:status');
                $statusAfter = \Artisan::output();
                $results[] = 'üîé Migration status (sonra): ' . substr(trim($statusAfter), -200);
                
                // Pending migration-lar var mƒ± yoxlayƒ±rq
                if (strpos($statusAfter, 'Pending') !== false) {
                    $results[] = '‚ö†Ô∏è H…ôl…ô d…ô Pending migration-lar var!';
                    
                    // X√ºsusi u…ôurlar
                    try {
                        // 1. Config cache t…ômizl…ô
                        \Artisan::call('config:clear');
                        \Artisan::call('config:cache');
                        $results[] = 'üîÑ Config cache yenid…ôn qura≈üdƒ±rƒ±ldƒ±';
                        
                        // 2. Yenid…ôn migration c…ôhdi
                        \Artisan::call('migrate', ['--force' => true]);
                        $retry = \Artisan::output();
                        $results[] = 'üîÅ ƒ∞kinci migration c…ôhdi: ' . trim($retry);
                        
                        // 3. Son yoxlama
                        \Artisan::call('migrate:status');
                        $finalStatus = \Artisan::output();
                        if (strpos($finalStatus, 'Pending') === false) {
                            $results[] = '‚úÖ B√ºt√ºn migration-lar uƒüurla i≈ül…ôdildi!';
                        } else {
                            $errors[] = '‚ùå Migration-lar h…ôl…ô d…ô Pending - manual m√ºdaxil…ô lazƒ±m';
                        }
                    } catch (\Exception $retryE) {
                        $errors[] = '‚ùå ƒ∞kinci c…ôhd x…ôtasƒ±: ' . $retryE->getMessage();
                    }
                } else {
                    $results[] = '‚úÖ B√ºt√ºn migration-lar Ran statusƒ±ndadƒ±r!';
                }
                
            } catch (\Exception $e) {
                $errors[] = '‚ùå Migration x…ôtasƒ±: ' . $e->getMessage();
            }
            
            // 4. user_backgrounds c…ôdv…ôlini yoxla v…ô ZORLA YARAT
            try {
                $hasTable = \Schema::hasTable('user_backgrounds');
                if ($hasTable) {
                    $columns = \Schema::getColumnListing('user_backgrounds');
                    $results[] = '‚úÖ user_backgrounds c…ôdv…ôli m√∂vcuddur';
                    $results[] = 'S√ºtunlar: ' . implode(', ', $columns);
                    
                    // Yoxla ki 'default' enum deƒüeri var mƒ±?
                    try {
                        \DB::statement("ALTER TABLE user_backgrounds MODIFY COLUMN active_type ENUM('solid', 'gradient', 'image', 'default') NOT NULL DEFAULT 'solid'");
                        $results[] = '‚úÖ user_backgrounds active_type enum yenilendi (default …ôlav…ô edildi)';
                    } catch (\Exception $enumError) {
                        // Enum yenil…ôm…ô x…ôtasƒ± - problem deyil
                        $results[] = '‚ö†Ô∏è Enum yenil…ônm…ôdi (artƒ±q m√∂vcud ola bil…ôr): ' . $enumError->getMessage();
                    }
                    
                    // solid_color nullable et
                    try {
                        \DB::statement("ALTER TABLE user_backgrounds MODIFY COLUMN solid_color VARCHAR(7) NULL");
                        $results[] = '‚úÖ solid_color s√ºtunu nullable edildi';
                    } catch (\Exception $nullError) {
                        $results[] = '‚ö†Ô∏è solid_color nullable edilm…ôdi (artƒ±q nullable ola bil…ôr): ' . $nullError->getMessage();
                    }
                    
                } else {
                    $results[] = '‚ùå user_backgrounds c…ôdv…ôli yoxdur - ZORLA YARADILIR!';
                    
                    // BRUTE FORCE: C…ôdv…ôli SQL il…ô yarat
                    try {
                        $createTableSQL = "
                            CREATE TABLE user_backgrounds (
                                id bigint unsigned NOT NULL AUTO_INCREMENT,
                                user_id bigint unsigned NOT NULL,
                                active_type enum('solid','gradient','image','default') NOT NULL DEFAULT 'solid',
                                solid_color varchar(7) DEFAULT NULL,
                                gradient_value text,
                                image_url varchar(255) DEFAULT NULL,
                                image_size enum('cover','contain','auto','100% 100%') NOT NULL DEFAULT 'cover',
                                image_position varchar(255) NOT NULL DEFAULT 'center',
                                created_at timestamp NULL DEFAULT NULL,
                                updated_at timestamp NULL DEFAULT NULL,
                                PRIMARY KEY (id),
                                UNIQUE KEY user_backgrounds_user_id_unique (user_id),
                                KEY user_backgrounds_user_id_foreign (user_id),
                                CONSTRAINT user_backgrounds_user_id_foreign FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
                            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                        ";
                        
                        \DB::statement($createTableSQL);
                        $results[] = '‚úÖ user_backgrounds c…ôdv…ôli ZORLA SQL il…ô yaradƒ±ldƒ±!';
                        
                        // Migration table-ƒ± da update et ki, migration-lar Ran kimi g√∂r√ºns√ºn
                        try {
                            $pendingMigrations = [
                                '2025_10_10_220714_add_user_background_settings_to_users_table',
                                '2025_10_10_220740_remove_chat_background_from_settings', 
                                '2025_10_10_230216_add_image_settings_to_users_table',
                                '2025_10_11_050734_add_active_background_type_to_users_table',
                                '2025_10_11_051123_remove_old_background_fields_from_users_table',
                                '2025_10_11_051200_create_user_backgrounds_table',
                                '2025_10_11_071108_update_user_backgrounds_table_add_default_type'
                            ];
                            
                            $currentBatch = \DB::table('migrations')->max('batch') + 1;
                            
                            foreach ($pendingMigrations as $migration) {
                                // Yoxla ki artƒ±q migrations table-da var mƒ±?
                                $exists = \DB::table('migrations')->where('migration', $migration)->exists();
                                if (!$exists) {
                                    \DB::table('migrations')->insert([
                                        'migration' => $migration,
                                        'batch' => $currentBatch
                                    ]);
                                    $results[] = "‚úÖ Migration qeydiy…ô …ôlav…ô edildi: $migration";
                                }
                            }
                            
                        } catch (\Exception $migrationUpdateError) {
                            $results[] = '‚ö†Ô∏è Migration table yenil…ônm…ôdi: ' . $migrationUpdateError->getMessage();
                        }
                        
                    } catch (\Exception $createError) {
                        $errors[] = '‚ùå C…ôdv…ôl ZORLA yaradilma x…ôtasƒ±: ' . $createError->getMessage();
                    }
                }
            } catch (\Exception $e) {
                $errors[] = '‚ùå C…ôdv…ôl yoxlama x…ôtasƒ±: ' . $e->getMessage();
            }
            
            // 5. Son cache t…ômizl…ôm…ô
            try {
                \Artisan::call('cache:clear');
                \Artisan::call('config:clear');
                $results[] = '‚úÖ Son cache t…ômizl…ôm…ô tamamlandƒ±';
            } catch (\Exception $e) {
                $errors[] = '‚ùå Son cache t…ômizl…ôm…ô x…ôtasƒ±: ' . $e->getMessage();
            }
            
            return response()->json([
                'success' => count($errors) === 0,
                'message' => count($errors) === 0 ? 'Database t…ômir uƒüurla tamamlandƒ±!' : 'B…ôzi x…ôtalar var, lakin …ôsas …ôm…ôliyyatlar tamamlandƒ±',
                'results' => $results,
                'errors' => $errors,
                'migration_status' => $migrationStatus ?? null
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Database t…ômir x…ôtasƒ±: ' . $e->getMessage(),
                'results' => $results ?? [],
                'errors' => array_merge($errors ?? [], [$e->getMessage()])
            ], 500);
        }
    }
    
    /**
     * user_backgrounds c…ôdv…ôlini manual yaratmaq
     */
    public function createUserBackgroundsTable(Request $request): JsonResponse
    {
        try {
            // ∆èv…ôl yoxla ki c…ôdv…ôl var ya yox
            if (\Schema::hasTable('user_backgrounds')) {
                return response()->json([
                    'success' => true,
                    'message' => 'user_backgrounds c…ôdv…ôli artƒ±q m√∂vcuddur!'
                ]);
            }
            
            // C…ôdv…ôli manual yarat
            \Schema::create('user_backgrounds', function ($table) {
                $table->id();
                $table->foreignId('user_id')->constrained()->onDelete('cascade');
                $table->enum('active_type', ['solid', 'gradient', 'image', 'default'])->default('solid');
                $table->string('solid_color', 7)->nullable();
                $table->text('gradient_value')->nullable();
                $table->string('image_url')->nullable();
                $table->enum('image_size', ['cover', 'contain', 'auto', '100% 100%'])->default('cover');
                $table->string('image_position')->default('center');
                $table->timestamps();
                $table->unique('user_id');
            });
            
            return response()->json([
                'success' => true,
                'message' => 'user_backgrounds c…ôdv…ôli uƒüurla yaradƒ±ldƒ±!'
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'C…ôdv…ôl yaratma x…ôtasƒ±: ' . $e->getMessage()
            ], 500);
        }
    }
}
